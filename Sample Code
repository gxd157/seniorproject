import cv2
import torch
from ultralytics import YOLO


# Load the YOLOv8 pre-trained model
model = YOLO("yolov8n.pt")  # Using a lightweight model for real-time performance


# Open webcam (0 for default camera, change to 1 or other for external)
cap = cv2.VideoCapture(0)


# Set frame size (optional for better performance)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)


# Initialize people counter
people_count = 0


while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame")
        break


    # Run YOLOv8 model on the frame
    results = model(frame)


    # Reset people counter for each frame
    people_count = 0


    # Loop through detections
    for r in results:
        for box in r.boxes:
            cls = int(box.cls[0])  # Class ID
            conf = float(box.conf[0])  # Confidence Score
            x1, y1, x2, y2 = map(int, box.xyxy[0])  # Bounding Box Coordinates


            # Check if detected object is a person (class 0 in COCO dataset)
            if cls == 0:
                # Increment people counter
                people_count += 1


                # Draw bounding box
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.putText(frame, f'Human {conf:.2f}', (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)


    # Display people counter on screen
    cv2.putText(frame, f'People Count: {people_count}', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)


    # Show the output frame
    cv2.imshow("Human Detection", frame)


    # Press 'q' to quit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break


cap.release()
cv2.destroyAllWindows()
